// Code generated by counterfeiter. DO NOT EDIT.
package httpfakes

import (
	"sync"

	"github.com/storyscript/auth/http"
)

type FakeTokenProvider struct {
	GetAccessTokenStub        func(string) (string, error)
	getAccessTokenMutex       sync.RWMutex
	getAccessTokenArgsForCall []struct {
		arg1 string
	}
	getAccessTokenReturns struct {
		result1 string
		result2 error
	}
	getAccessTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetConsentURLStub        func(string) string
	getConsentURLMutex       sync.RWMutex
	getConsentURLArgsForCall []struct {
		arg1 string
	}
	getConsentURLReturns struct {
		result1 string
	}
	getConsentURLReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTokenProvider) GetAccessToken(arg1 string) (string, error) {
	fake.getAccessTokenMutex.Lock()
	ret, specificReturn := fake.getAccessTokenReturnsOnCall[len(fake.getAccessTokenArgsForCall)]
	fake.getAccessTokenArgsForCall = append(fake.getAccessTokenArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAccessToken", []interface{}{arg1})
	fake.getAccessTokenMutex.Unlock()
	if fake.GetAccessTokenStub != nil {
		return fake.GetAccessTokenStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAccessTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTokenProvider) GetAccessTokenCallCount() int {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	return len(fake.getAccessTokenArgsForCall)
}

func (fake *FakeTokenProvider) GetAccessTokenCalls(stub func(string) (string, error)) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = stub
}

func (fake *FakeTokenProvider) GetAccessTokenArgsForCall(i int) string {
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	argsForCall := fake.getAccessTokenArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenProvider) GetAccessTokenReturns(result1 string, result2 error) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	fake.getAccessTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) GetAccessTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAccessTokenMutex.Lock()
	defer fake.getAccessTokenMutex.Unlock()
	fake.GetAccessTokenStub = nil
	if fake.getAccessTokenReturnsOnCall == nil {
		fake.getAccessTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAccessTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeTokenProvider) GetConsentURL(arg1 string) string {
	fake.getConsentURLMutex.Lock()
	ret, specificReturn := fake.getConsentURLReturnsOnCall[len(fake.getConsentURLArgsForCall)]
	fake.getConsentURLArgsForCall = append(fake.getConsentURLArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetConsentURL", []interface{}{arg1})
	fake.getConsentURLMutex.Unlock()
	if fake.GetConsentURLStub != nil {
		return fake.GetConsentURLStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getConsentURLReturns
	return fakeReturns.result1
}

func (fake *FakeTokenProvider) GetConsentURLCallCount() int {
	fake.getConsentURLMutex.RLock()
	defer fake.getConsentURLMutex.RUnlock()
	return len(fake.getConsentURLArgsForCall)
}

func (fake *FakeTokenProvider) GetConsentURLCalls(stub func(string) string) {
	fake.getConsentURLMutex.Lock()
	defer fake.getConsentURLMutex.Unlock()
	fake.GetConsentURLStub = stub
}

func (fake *FakeTokenProvider) GetConsentURLArgsForCall(i int) string {
	fake.getConsentURLMutex.RLock()
	defer fake.getConsentURLMutex.RUnlock()
	argsForCall := fake.getConsentURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeTokenProvider) GetConsentURLReturns(result1 string) {
	fake.getConsentURLMutex.Lock()
	defer fake.getConsentURLMutex.Unlock()
	fake.GetConsentURLStub = nil
	fake.getConsentURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenProvider) GetConsentURLReturnsOnCall(i int, result1 string) {
	fake.getConsentURLMutex.Lock()
	defer fake.getConsentURLMutex.Unlock()
	fake.GetConsentURLStub = nil
	if fake.getConsentURLReturnsOnCall == nil {
		fake.getConsentURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getConsentURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeTokenProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccessTokenMutex.RLock()
	defer fake.getAccessTokenMutex.RUnlock()
	fake.getConsentURLMutex.RLock()
	defer fake.getConsentURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTokenProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ http.TokenProvider = new(FakeTokenProvider)
